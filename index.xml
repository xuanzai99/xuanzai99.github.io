
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>XuanZai99</title>
   <link>https://xuanzai99.github.io/</link>
   <description>Recent content on XuanZai99</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <lastBuildDate>Thu, 19 Mar 2020 18:23:20 +0800</lastBuildDate>
   
       <atom:link href="https://xuanzai99.github.io/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Java基础学习</title>
       <link>https://xuanzai99.github.io/post/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</link>
       <pubDate>Thu, 19 Mar 2020 18:23:20 +0800</pubDate>
       
       <guid>https://xuanzai99.github.io/post/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</guid>
       <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&#34;基本数据类型&#34;&gt;基本数据类型&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;整数型: byty,short,int,long&lt;/li&gt;
&lt;li&gt;浮点型: float,double&lt;/li&gt;
&lt;li&gt;布尔型: boolean&lt;/li&gt;
&lt;li&gt;字符型: char&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;h3 id=&#34;引用数据类型&#34;&gt;引用数据类型&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;字符串型String属于引用类型&lt;/li&gt;
&lt;li&gt;String字符串不属于基本数据类型范畴&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于计算机存储单位&#34;&gt;关于计算机存储单位&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;计算机只能识别二进制&lt;/li&gt;
&lt;li&gt;1字节 = 8bit&lt;/li&gt;
&lt;li&gt;1bit就是一个1或0&lt;/li&gt;
&lt;li&gt;1KB = 1024byte&lt;/li&gt;
&lt;li&gt;1MB = 1024KB&lt;/li&gt;
&lt;li&gt;1GB = 1024MB&lt;/li&gt;
&lt;li&gt;1TB = 1024GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据类型占用字节数量byte-取值范围&#34;&gt;数据类型占用字节数量(byte)-取值范围&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;byte   1&lt;/li&gt;
&lt;li&gt;short   2&lt;/li&gt;
&lt;li&gt;int     4&lt;/li&gt;
&lt;li&gt;long   8&lt;/li&gt;
&lt;li&gt;float   4&lt;/li&gt;
&lt;li&gt;double  8&lt;/li&gt;
&lt;li&gt;boolean 1&lt;/li&gt;
&lt;li&gt;char     2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二进制转换成十进制&#34;&gt;二进制转换成十进制&lt;/h2&gt;
&lt;h2 id=&#34;十进制转换成二进制&#34;&gt;十进制转换成二进制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;除以2,然后余数逆序输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是字符编码&#34;&gt;什么是字符编码？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;字符编码是人为定义的一套转换表&lt;/li&gt;
&lt;li&gt;在字符编码中规定了一系列的文字对应的二进制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于字符编码的发展过程&#34;&gt;关于字符编码的发展过程？&lt;/h2&gt;
&lt;p&gt;-起初的时候计算机是不支持文字的,只支持科学计算.实际上计算机期初&lt;/p&gt;
&lt;h2 id=&#34;转义字符&#34;&gt;转义字符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java语言中&amp;rdquo;&amp;quot;负责转义&lt;/li&gt;
&lt;li&gt;\t表示制表符tab&lt;/li&gt;
&lt;li&gt;\n表示换行&lt;/li&gt;
&lt;li&gt;\ + 任何功能字符都可以变成普通字符&lt;/li&gt;
&lt;li&gt;\u表示后面的是一个字符的unicode编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浮点型数据&#34;&gt;浮点型数据&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注意:任意一个浮点型都比整数型空间大&lt;/li&gt;
&lt;li&gt;浮点型数据默认都是double来处理&lt;/li&gt;
&lt;li&gt;如果需要当做float类型来处理,需要在字面量后添加F/f&lt;/li&gt;
&lt;li&gt;float和double存储数据的时候都是存储的近似值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本类型转换规则&#34;&gt;基本类型转换规则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;八种基本数据类型中,出boolean类型不能转换,剩下七种类型之间都可以进行转换&lt;/li&gt;
&lt;li&gt;如何整数型字面量没有超出byte,short,char的取值范围,可以直接将其复制给byte,short,char类型的变量&lt;/li&gt;
&lt;li&gt;小容量向大容量转换称为自动类型转换,容量从小到大的排序为:byte &amp;lt; short = char &amp;lt; int &amp;lt; long &amp;lt; float &amp;lt; double&lt;/li&gt;
&lt;li&gt;大容量转换成小容量,称为强制类型转换,编写是 必须添加&amp;quot;强制类型转换符&amp;quot;但运行时可能会出现精度损失&lt;/li&gt;
&lt;li&gt;多种数据类型做混合运算的时候,最终的结果类型是&amp;quot;最大容量&amp;quot;对应的类型。&lt;/li&gt;
&lt;li&gt;char+short+byte混合运算的时候,会各自先转换成int再做运算&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;控制语句&#34;&gt;控制语句&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h2 id=&#34;选择语句&#34;&gt;选择语句&lt;/h2&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;if语句&lt;/li&gt;
&lt;li&gt;switch语句&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;h2 id=&#34;循环语句&#34;&gt;循环语句&lt;/h2&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;for循环&lt;/li&gt;
&lt;li&gt;while循环&lt;/li&gt;
&lt;li&gt;do..while..循环&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;h2 id=&#34;转向语句&#34;&gt;转向语句&lt;/h2&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;continue&lt;/li&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;if语句&#34;&gt;if语句&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;if语句是分支语句,也可以叫做条件语句&lt;/li&gt;
&lt;li&gt;第一种写法:&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;if(布尔表达式)
 {
  java语句
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该语法的执行原理是:&lt;!-- raw HTML omitted --&gt;
如何布尔表达式的结果是true,则执行大括号的中的程序,否则大括号中的代码不执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二种写法:&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;if(布尔表达式)
{
 java语句
}else{
    java语句
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该语法的执行原理是:&lt;!-- raw HTML omitted --&gt;
如果布尔表达式的结果式true,则执行分支1,分支2不执行.如果布尔表达式的结果是false,则执行分支2,分支1不执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三种写法:&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;if(布尔表达式1)
{

    java语句

}else if(布尔表达式2){

    java语句

}else if(布尔表达式3){

    java语句

}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该语法的执行原理是:&lt;!-- raw HTML omitted --&gt;
先判断布尔表达式1,如果布尔表达式1为true,则执行分支1，,然后结束整个if语句。&lt;!-- raw HTML omitted --&gt;
当布尔表达式1结果是false,那么会继续判断其他分支直到找到布尔表达式为true的分支进行执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注意：对于if语句来说,在任何情况下只能有一个分支执行。if语句中只要有一个分支执行了,整个if语句就结束了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当分支中java语句只有一条,可以省略大括号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制语句和控制语句之间是可以相互嵌套的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>JavaSpringBoot学习</title>
       <link>https://xuanzai99.github.io/post/javaspringboot%E5%AD%A6%E4%B9%A0/</link>
       <pubDate>Thu, 19 Mar 2020 17:56:19 +0800</pubDate>
       
       <guid>https://xuanzai99.github.io/post/javaspringboot%E5%AD%A6%E4%B9%A0/</guid>
       <description>&lt;h1 id=&#34;spring-boot&#34;&gt;Spring Boot&lt;/h1&gt;
&lt;p&gt;简化J2ee&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Markdown学习</title>
       <link>https://xuanzai99.github.io/post/markdown%E5%AD%A6%E4%B9%A0/</link>
       <pubDate>Tue, 17 Mar 2020 23:50:46 +0800</pubDate>
       
       <guid>https://xuanzai99.github.io/post/markdown%E5%AD%A6%E4%B9%A0/</guid>
       <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;# 一级标题
&lt;span style=&#34;color:#75715e&#34;&gt;## 二级标题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;### 三级标题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#### 四级标题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##### 五级标题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###### 六级标题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
    
=//粗体
&lt;span style=&#34;font-weight:bold&#34;&gt;**你好呀**&lt;/span&gt;

//斜体
&lt;span style=&#34;font-style:italic&#34;&gt;*我喜欢你*&lt;/span&gt;

//删除线
&lt;span style=&#34;color:#f92672&#34;&gt;~~此内容为废弃内容~~&lt;/span&gt;
    
//引用书写语法如下：

&amp;gt;此教程来自小小叶儿出品，版权所有，违版必究
&amp;gt;&amp;gt;此教程来自小小叶儿出品，版权所有，违版必究
&amp;gt;&amp;gt;&amp;gt;此教程来自小小叶儿出品，版权所有，违版必究
    
//分隔线（长度：根据内容而定）
---
//分割线（占全屏）
***    
    
//图片插入
![&lt;span style=&#34;color:#f92672&#34;&gt;图片名称&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;图片地址-可以本地：也可以网络&lt;/span&gt;)    

//超链接
[&lt;span style=&#34;color:#f92672&#34;&gt;点击跳转到我的GitHub&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https://github.com/yerenping&lt;/span&gt;)

//有序列表：序号+点+空格，生成列表 
&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt; 首页
&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; 分类
&lt;span style=&#34;color:#66d9ef&#34;&gt;3.&lt;/span&gt; 标题
//无需列表：- + 空格
- 

//鼠标右键--&amp;gt;插入--&amp;gt;表格


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Java编程思想书籍学习记录</title>
       <link>https://xuanzai99.github.io/post/java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0/</link>
       <pubDate>Tue, 17 Mar 2020 20:33:17 +0800</pubDate>
       
       <guid>https://xuanzai99.github.io/post/java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0/</guid>
       <description>&lt;h1 id=&#34;第一章--对象导论&#34;&gt;第一章  对象导论&lt;/h1&gt;
&lt;h1 id=&#34;11抽象过程&#34;&gt;1.1抽象过程&lt;/h1&gt;
&lt;p&gt;面向对象方式通过向程序员提供表示问题空间中的元素的工具更近了一步。&lt;!-- raw HTML omitted --&gt;
程序可以通过添加新类型的对象使自身适用于某个特定的问题,&lt;!-- raw HTML omitted --&gt;
因此当你在阅读描述解决方案的代码的同时也是在阅读问题的表述。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;alan-kay总结的smalltalk的五个基本特性&#34;&gt;Alan Kay总结的Smalltalk的五个基本特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;万物皆为对象:&lt;!-- raw HTML omitted --&gt;将对象视为奇特的变量,他可以储存数据,除此之外,你还可以要求它在自身上执行操作&lt;!-- raw HTML omitted --&gt;
理论上讲,你可以抽取带求解问题的任何概念化构件(狗,建筑物,服务等),将其表示为程序中的对象&lt;/li&gt;
&lt;li&gt;程序是对象的集合,它们可以通过发送消息来告知彼此所要做的：&lt;!-- raw HTML omitted --&gt;
要想请求一个对象,就必须对该对象发送一条消息。更具体的讲,可以把消息想象为对某个特定对象的调用请求。&lt;/li&gt;
&lt;li&gt;每个对象都有自己的由其他对象所构成的存储:&lt;!-- raw HTML omitted --&gt;
换句话说,可以通过包换现有对象的包的方式来创建新类型的对象。因此,可以在程序中构建复杂的体系,同时将其复杂性隐藏在对象的简单性背后&lt;/li&gt;
&lt;li&gt;每个对象都拥有其类型:&lt;!-- raw HTML omitted --&gt;
按照通用的说法,&amp;ldquo;每个对象都是某个类(class)的一个实例(instance)&amp;quot;,这里的类就是类型的同义词。每个类最&lt;!-- raw HTML omitted --&gt;
重要的区别与其他类的特性就是&amp;quot;可以发送什么样的信息给它&amp;rdquo;&lt;/li&gt;
&lt;li&gt;某一特定的类型的所有对象都可以接受同样的信息:&lt;!-- raw HTML omitted --&gt;
这是一句意味深长的表述,因为&amp;quot;圆形&amp;quot;类型的对象也是&amp;quot;几何形&amp;quot;类型的对象,所以一个&amp;quot;圆形&amp;quot;对象必定可以接受&lt;!-- raw HTML omitted --&gt;
发送给&amp;quot;几何形&amp;quot;对象的消息。这意味这可以编写与&amp;quot;几何形&amp;quot;交互并自动处理所有与几何特性性质相关的事物的代码&lt;!-- raw HTML omitted --&gt;
这种可代替性(substitutability)是OOP中最强有力的概念之一&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;booch对对象提出了一个更加简介的描述&#34;&gt;Booch对对象提出了一个更加简介的描述:&lt;/h2&gt;
&lt;p&gt;对象具有状态,行为和标识。具体来说就是每一个对象在内存中都有一个唯一的地址。&lt;/p&gt;
&lt;h1 id=&#34;12每个对象都一个接口&#34;&gt;1.2每个对象都一个接口&lt;/h1&gt;
</description>
     </item>
   
     <item>
       <title>Java学习路线</title>
       <link>https://xuanzai99.github.io/post/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
       <pubDate>Tue, 17 Mar 2020 20:20:33 +0800</pubDate>
       
       <guid>https://xuanzai99.github.io/post/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
       <description>&lt;h1 id=&#34;基础知识&#34;&gt;基础知识&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;编程语言：java python c&lt;/li&gt;
&lt;li&gt;基本语法 （算法第四版）&lt;/li&gt;
&lt;li&gt;基本网络知识：tcp/ip http/https&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;工具方面&#34;&gt;工具方面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;操作系统：linux (CentOS\Ubuntu\Fe..)&lt;/li&gt;
&lt;li&gt;代码管理：svn/git&lt;/li&gt;
&lt;li&gt;持续集成(CI/CD):jenkins&lt;/li&gt;
&lt;li&gt;java的项目管理工具：maven/gradle&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;框架方面&#34;&gt;框架方面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ssm:spring +springmvc+mybatis(流行)&lt;/li&gt;
&lt;li&gt;spring boot&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;各种中间件&#34;&gt;各种中间件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;MQ 消息队列&lt;/li&gt;
&lt;li&gt;RPC 通讯框架 gRPC thrift dubbo springcloud&lt;/li&gt;
&lt;li&gt;elasticsearch 收索引擎 数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据库&#34;&gt;数据库&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SQL：mysql/postgre sql&lt;/li&gt;
&lt;li&gt;Nosql:redis memcached mongodb elasticsearch&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;架构方面&#34;&gt;架构方面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;分布式/微服务架构&lt;/li&gt;
&lt;li&gt;spring cloud&lt;/li&gt;
&lt;li&gt;dubbo&lt;/li&gt;
&lt;li&gt;rpc通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;虚拟化容器化的技术&#34;&gt;虚拟化/容器化的技术&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Docker 容器化&lt;/li&gt;
&lt;li&gt;k8s kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;关注源码性能&#34;&gt;关注源码/性能&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;jdk源码以及部分设计思想&lt;/li&gt;
&lt;li&gt;Spring 源码&lt;/li&gt;
&lt;li&gt;JVM细节与排错&lt;/li&gt;
&lt;li&gt;高并发/高可用、&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;个人计划&#34;&gt;个人计划&lt;/h1&gt;
&lt;h2 id=&#34;java&#34;&gt;Java&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;学习javaee&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;学习Spring框架&lt;/li&gt;
&lt;li&gt;学习Spring boot框架&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据库-1&#34;&gt;数据库&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;学习Mysql数据库&lt;/li&gt;
&lt;/ol&gt;
</description>
     </item>
   
 </channel>
</rss>
